name: AC_WATCHER_ORACLE

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    env:
      name: ${GITHUB_REPOSITORY#*/}"-dev"
      key: "ssh-key-scrap"
      stamp: ${GITHUB_SHA}
      host: ${{ vars.ORACLE_HOST }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment variables
        env:
          TG_ADMIN_ID: ${{ vars.TG_ADMIN_ID }}
          TG_CHANNEL_ID: ${{ vars.TG_CHANNEL_ID }}
          TG_GROUPS_IDS: ${{ vars.TG_GROUPS_IDS }}
          TG_USERS_IDS: ${{ vars.TG_USERS_IDS }}
          IS_NOTIFY_ADMIN: ${{ vars.IS_NOTIFY_ADMIN }}
          IS_ADMIN_NOTIFY_WITH_SOUND: ${{ vars.IS_ADMIN_NOTIFY_WITH_SOUND }}
          IS_CHANNEL_NOTIFY_WITH_SOUND: ${{ vars.IS_CHANNEL_NOTIFY_WITH_SOUND }}
          IS_USERS_NOTIFY_WITH_SOUND: ${{ vars.IS_USERS_NOTIFY_WITH_SOUND }}
          IS_GROUPS_NOTIFY_WITH_SOUND: ${{ vars.IS_GROUPS_NOTIFY_WITH_SOUND }}
          IS_PIN_STATUS_IN_GROUPS: ${{ vars.IS_PIN_STATUS_IN_GROUPS }}
          IS_MONGO_CONNECTED: ${{ vars.IS_MONGO_CONNECTED }}
          TZ: ${{ vars.TZ }}
          SCHEDULE_REPEATABLE_WEEKS: ${{ vars.SCHEDULE_REPEATABLE_WEEKS }}
          IS_PREDICTION: ${{ vars.IS_PREDICTION }}

          PINGING_HOST: ${{ secrets.PINGING_HOST }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          MONGO_URL: ${{ secrets.MONGO_URL }}
        run: |
          echo "TG_ADMIN_ID=$TG_ADMIN_ID" >> .env
          echo "TG_CHANNEL_ID=$TG_CHANNEL_ID" >> .env
          echo "TG_GROUPS_IDS=$TG_GROUPS_IDS" >> .env
          echo "TG_USERS_IDS=$TG_USERS_IDS" >> .env
          echo "IS_NOTIFY_ADMIN=$IS_NOTIFY_ADMIN" >> .env
          echo "IS_ADMIN_NOTIFY_WITH_SOUND=$IS_ADMIN_NOTIFY_WITH_SOUND" >> .env
          echo "IS_CHANNEL_NOTIFY_WITH_SOUND=$IS_CHANNEL_NOTIFY_WITH_SOUND" >> .env
          echo "IS_USERS_NOTIFY_WITH_SOUND=$IS_USERS_NOTIFY_WITH_SOUND" >> .env
          echo "IS_GROUPS_NOTIFY_WITH_SOUND=$IS_GROUPS_NOTIFY_WITH_SOUND" >> .env
          echo "IS_PIN_STATUS_IN_GROUPS=$IS_PIN_STATUS_IN_GROUPS" >> .env
          echo "IS_MONGO_CONNECTED=$IS_MONGO_CONNECTED" >> .env
          echo "TZ=$TZ" >> .env
          echo "SCHEDULE_REPEATABLE_WEEKS=$SCHEDULE_REPEATABLE_WEEKS" >> .env
          echo "IS_PREDICTION=$IS_PREDICTION" >> .env
          echo "MONGO_URL=$MONGO_URL" >> .env
          echo "PINGING_HOST=$PINGING_HOST" >> .env
          echo "TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN" >> .env
          echo "MONGO_URL=$MONGO_URL" >> .env
          echo "ORACLE_HOST=$ORACLE_HOST" >> .env
          echo "ORACLE_SSH=$ORACLE_SSH" >> .env
      - name: Enable buildx
        run: |
          sudo docker buildx create --use

      - name: Build docker
        run: |
          sudo docker buildx build -t ${{ env.name }}-${{ env.stamp }} --platform linux/amd64 --output type=docker .
      #  --platform linux/amd64,linux/arm64,linux/arm/v8

      - name: Show images
        run: |
          sudo docker images

      - name: Save image
        run: |
          docker save -o ${{ env.name }}-${{ env.stamp }}.tar ${{ env.name }}-${{ env.stamp }}

      - name: Save secret key
        run: |
          echo "${{ secrets.ORACLE_SSH }}" > ${key}
          sudo chmod 600 ${key}

      - name: Copy image
        run: |
          scp -i ${key} -o "StrictHostKeyChecking no" ${{ env.name }}-${{ env.stamp }}.tar ${{ env.host }}:${{ env.name }}-${{ env.stamp }}.tar

      - name: Start image
        run: |
          ssh -i ${key} -o "StrictHostKeyChecking no" ${{ env.host }} 'sudo docker load -i '${{ env.name }}'-'${{ env.stamp }}'.tar; \
          sudo docker stop '${{ env.name }}' || true; \
          sudo docker run --log-driver json-file --log-opt max-size=10m --log-opt max-file=1 -d --restart always -p 3033:3033 --name '${{ env.name }}'-new '${{ env.name }}'-'${{ env.stamp }}'; \
          sudo docker rm '${{ env.name }}' || true; sudo docker rmi $(sudo docker images -q) || true; \
          sudo docker rename '${{ env.name }}'-new '${{ env.name }}'; rm '${{ env.name }}'-'${{ env.stamp }}'.tar'
